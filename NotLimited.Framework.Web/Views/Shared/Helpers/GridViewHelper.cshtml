@* TypeVisibility: Internal DisableLinePragmas: true TrimLeadingUnderscores: true *@
@* Generator : MvcHelper *@

@using NotLimited.Framework.Data.Queries
@using NotLimited.Framework.Web.Controls
@using NotLimited.Framework.Web.Controls.Grid
@using NotLimited.Framework.Web.Helpers

@helper GridScript()
{
    <script>
    $(function () {
        $("th.sortable").click(function () {
            SortGrid($(this).data("name"), $(this).data("descending"));
        });
    });

    function SortGrid(name, descending) {
        $("#gridSort #sortBy").val(name);
        $("#gridSort #descending").val(descending);
        $("#gridSort").submit();
    }
    </script>
}

@helper Grid(HtmlHelper htmlHelper, List<HelperResult> headers, List<List<HelperResult>> rows, Func<IDisposable> form, Func<object, HelperResult> formControls, Pagination pagination, object tableHtmlAttributes)
{
    using (htmlHelper.BeginForm(null, null, FormMethod.Get, new {id = "gridSort"}))
    {
        @htmlHelper.Form().Hidden("sortBy", "")
        @htmlHelper.Form().Hidden("descending", "")
        @htmlHelper.Form().HiddenForQuery("sortBy", "descending")
    }
    
    <div></div>

    using (form != null ? form() : new DummyForm())
    {
        <table @htmlHelper.RenderHtmlAttributes(tableHtmlAttributes)>
            <thead>
                <tr>
                    @foreach (var header in headers)
                    {
                        @header
                    }
                </tr>
            </thead>
            <tbody>
            
                @foreach (var row in rows)
                {
                    <tr>
                        @foreach (var column in row)
                        {
                            @column
                        }
                    </tr>
                }
            </tbody>
        </table>

        if (formControls != null)
        {
            @formControls(null)
        }
    }

    if (pagination != null)
    {
        @htmlHelper.Partial("Paginator", pagination)
    }
}

@helper TableHeader(System.Web.Mvc.HtmlHelper helper, PropertyMetadata prop, string title, TableHelpers.SortOrder sortOrder)
{
    if (prop.Sortable)
    {
        <th class="sortable" data-name="@prop.PropertyInfo.Name" data-descending="@TableHelpers.IsOppositeOrderDescending(sortOrder).ToString()">
            @title
            <div class="pull-right">
                <span class="fa @TableHelpers.GetSortIcon(sortOrder)" style="margin-right: 5px" />
            </div>
        </th>
    }
    else
    {
        <th>@title</th>
    }

}

@helper TableFieldConvention(System.Web.Mvc.HtmlHelper helper, string modelName, string fieldName, object model)
{
    <td>
        @(helper.Partial(modelName + "/TableView/" + fieldName, model))
    </td>
}

@helper TableFieldFixedView(System.Web.Mvc.HtmlHelper helper, string view, object model)
{
    <td>
        @(helper.Partial(view, model))
    </td>
}