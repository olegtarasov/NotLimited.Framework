@* TypeVisibility: Internal DisableLinePragmas: true TrimLeadingUnderscores: true GeneratePrettyNames : true *@
@* Generator : MvcHelper *@

@using NotLimited.Framework.Data.Queries
@using NotLimited.Framework.Web.Helpers

@helper RenderPage(HtmlHelper htmlHelper, int page, int currentPage)
{
    <li class="@(page == currentPage ? "active" : null)">
        @htmlHelper.ActionLink((page).ToString(), null, htmlHelper.AppendQueryString(new { page }))
    </li>
}

@helper DisabledPage()
{
    <li class="disabled"><span>...</span></li>
}

@helper Paginator(System.Web.Mvc.HtmlHelper htmlHelper, Pagination pagination, string wrapperClass = "text-center", string listClass = "pagination")
{
    int pageCount = pagination.PageCount;
    if (pageCount > 1)
    {
        <div class="@wrapperClass">
            <ul class="@listClass">
                @if (pageCount > 6)
                {
                    if (pagination.Page < 5)
                    {
                        foreach (var page in Enumerable.Range(1, Math.Max(3, pagination.Page + 1)))
                        {
                            @RenderPage(htmlHelper, page, pagination.Page)
                        }
                    }
                    else
                    {
                        @RenderPage(htmlHelper, 1, pagination.Page)
                    }

                    @DisabledPage()

                    if (pagination.Page > pageCount - 4)
                    {
                        int start = Math.Min(pagination.Page - 1, pageCount - 2);

                        foreach (var page in Enumerable.Range(start, pageCount - start + 1))
                        {
                            @RenderPage(htmlHelper, page, pagination.Page)
                        }
                    }
                    else
                    {
                        if (pagination.Page >= 5)
                        {
                            foreach (var page in Enumerable.Range(pagination.Page - 1, 3))
                            {
                                @RenderPage(htmlHelper, page, pagination.Page)
                            }

                            @DisabledPage()
                        }

                        @RenderPage(htmlHelper, pageCount, pagination.Page)
                    }
                }
                else
                {
                    foreach (var page in Enumerable.Range(1, pageCount))
                    {
                        @RenderPage(htmlHelper, page, pagination.Page)
                    }
                }
            </ul>
        </div>
    }
}