@* TypeVisibility: Internal DisableLinePragmas: true TrimLeadingUnderscores: true GeneratePrettyNames : true *@
@* Generator : MvcHelper *@

@using NotLimited.Framework.Common.Helpers
@using NotLimited.Framework.Server.Queries
@using NotLimited.Framework.Web.Controls
@using NotLimited.Framework.Web.Controls.Grid
@using NotLimited.Framework.Web.Helpers

@helper GridScript()
{
    <script>
    $(function () {
        $("th.sortable").click(function () {
            SortGrid($(this).data("name"), $(this).data("descending"));
        });
    });
        
    function SortGrid(name, descending) {
        $("#gridSort #sortBy").val(name);
        $("#gridSort #descending").val(descending);
        $("#gridSort").submit();
    }

    function SetItemsPerPage() {
        $("#itemsPerPageForm").submit();
    }
    </script>
}

@helper Grid(HtmlHelper htmlHelper, GridOptions options)
{

    using (htmlHelper.BeginForm(null, null, FormMethod.Get, new {id = "gridSort"}))
    {
        @htmlHelper.Form().Hidden(Lambda<SortDefinition>.MemberName(x => x.SortBy), "")
        @htmlHelper.Form().Hidden(Lambda<SortDefinition>.MemberName(x => x.Descending), "")
        @htmlHelper.Form().HiddenForQuery(Lambda<SortDefinition>.MemberList().Expr(x => x.SortBy).Expr(x => x.Descending).ToArray())
    }

    if (options.Pagination != null && options.Pagination.PageCount > 1)
    {
        <div class="pull-right">
            @using (htmlHelper.Form().BeginGetForm(options.Action, options.Controller, htmlAttributes: new {@class = "form-horizontal"}, id: "itemsPerPageForm"))
            {
                @htmlHelper.Label(Lambda<Pagination>.MemberName(x => x.ItemsPerPage), "Записей на странице:")
                @htmlHelper.Form().ItemsPerPageDropdown(options.Pagination == null ? (int?)null : options.Pagination.ItemsPerPage)
                @htmlHelper.Form().HiddenForQuery(Lambda<Pagination>.MemberName(x => x.ItemsPerPage))
            }
        </div>
    }
    
    <div class="row">
        <div class="col-md-12">
            @using (options.Form != null ? options.Form() : new DummyForm())
            {
                <table @htmlHelper.RenderHtmlAttributes(options.TableHtmlAttributes)>
                    <thead>
                        <tr>
                            @foreach (var header in options.Headers)
                            {
                                @header
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in options.Rows)
                        {
                            <tr>
                                @foreach (var column in row)
                                {
                                    @column
                                }
                            </tr>
                        }
                    </tbody>
                </table>

                if (options.FormControls != null)
                {
                    @options.FormControls(null)
                }
            }

            @if (options.Pagination != null && options.Pagination.PageCount > 1)
            {
                @htmlHelper.Paginator(options.Pagination, action: options.Action, controller: options.Controller)
            }
        </div>
    </div>
}

@helper TableHeader(System.Web.Mvc.HtmlHelper helper, PropertyMetadata prop, string title, TableHelpers.SortOrder sortOrder)
{
    if (prop.Sortable)
    {
        <th class="sortable" data-name="@prop.PropertyInfo.Name" data-descending="@TableHelpers.IsOppositeOrderDescending(sortOrder).ToString()">
            <div class="sortable">
                @title
                <span class="fa @TableHelpers.GetSortIcon(sortOrder)" style="margin-right: 5px"></span>
            </div>
        </th>
    }
    else
    {
        <th>@title</th>
    }

}

@helper TableFieldConvention(System.Web.Mvc.HtmlHelper helper, string modelName, string fieldName, object model)
{
    <td>
        @(helper.Partial(modelName + "/TableView/" + fieldName, model))
    </td>
}

@helper TableFieldFixedView(System.Web.Mvc.HtmlHelper helper, string view, object model)
{
    <td>
        @(helper.Partial(view, model))
    </td>
}